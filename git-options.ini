# -------------------------------------------------------------------------
#
# gitcat - git options supported by gitcat
#
# -------------------------------------------------------------------------
#   git-option | configuration for git options supported by git cat
#
#   Copyright (C) Andrew Mathas <Andrew.Mathas@gmail.com>
#
#   Distributed under the terms of the GNU General Public License (GPL)
#                 http://www.gnu.org/licenses/
# -------------------------------------------------------------------------
# This file lists the git cammands and their options that are supported by
# gitcat.  This file is read by the Settings class in gitcat and used to
# generate the gitcat command line options that call git and to set their
# defaults.
#
# Each section in the ini file contains the git options supported by this
# gitcat subcommand, where the format below is designed to make it easier to
# pass these options to the add_augment method of an arg_parse subparser.
# Inside each ini section the lines are delimited by equals signs with either
# one or two equals signs per line, which is interpreted as:
#     3 equal signs: option name = help = default
#     2 equal signs: additional add_augment key-value options that are
#                    added as key=value pairs to the `extras` dictionary
# This data is then given to add_augment as
#     suparser.add_augment(--<option>, help=<help>, default=<default>,
#                          dest=git_<option>, **extras)
# The first character of <option> becomes a one character shorthand for the
# option unless the first character is '*'.
#
# These options are automatically added to the corresponding git
# command by GitCat.process_options()
#
# -------------------------------------------------------------------------
# Andrew Mathas
# (c) Copyright 2018
#
# Licence
# -------
# GNU General Public License, Version 3, 29 June 2007
#
# This program is free software: you can redistribute it and/or modify it
# under the terms of the GNU General Public License (GPL_) as published by
# the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
# -------------------------------------------------------------------------

[add]
description     = Add current repository to the catalogue
directory       = Add repository from specified directory = None

[branch]
description     = Print status of all branches in each repository

[commit]
description     = Commit changes in all repositories
all             = automatically stage files that have been modified and deleted = False
branch          = Show the branch and tracking information = False
dry-run         = Show what would be committed without committing = False
verbose         = Print a unified diff for the commit = False

[diff]
description     = Print a diff of the changes in each repository
*name-only      = Show only names of changed files = False
*name-status    = Show only names and status of changed files = False
*numstat        = Show number of added and deleted lines without abbreviating = False
*shortstat      = Print number of modified files and number of added/deleted line = False
*summary        = Print condensed summary of changes = False

[fetch]
description     = Fetch all repositories from remote repositories
*all            = Fetch all branches = False
*dry-run        = Print what would be done without doing it = False
force           = Fetch even if there are changes = False
prune           = Before fetching, remove any remote-tracking references that no longer exist on the remote = False
tags            = Fetch all tags from remote repositories = False

[install]
description     = Install repository from the catalogue
dry-run         = Do everything except actually install the repositories = False

[list]
alias           = ls
description     = List all repositories in the catalogue

[move]
alias           = mv
description     = Move repository to specified position in catalogue'

[pull]
description     = Pull all repositories from remote repositories
*all            = Pull all branches = False
dry-run         = Print what would be done without doing it = False
*ff-only        = Fast-forward only merge = False
*squash         = Squash the merge = False
*stat           = Show a diffstat at the end of the merge = False
tags            = Fetch all tags from remote repositories = False

# shorthands for merge strategies when pulling
strategy        = Use the specified merge strategy = None
          nargs = ?
           type = str
         action = append
           dest = strategy
*recursive      = Use recursive three-way merge = False
           dest = strategy
         action = append_const
          const = recursive
*theirs         = Resolve merge conflicts favouring remote repository = False
         action = append_const
           dest = strategy
          const = theirs
*ours           = Resolve merge conflicts favouring local repository = False
         action = append_const
          const = ours
           dest = strategy

[push]
description     = Commit and push local repositories to their remotes
dry-run         = Do everything except actually send the updates = False
*all            = Push all branches = False
*prune          = Remove remote branches that do not have a local counterpart = False
*tags           = Push all tags = False

[remote-set-ssh]
description     = Change all remote URLs to use ssh access

[remove]
alias           = rm
description     = Remove repository from the catalogue
everything      = Delete everything, including the directory = False
directory       = Remove repository from specified directory = None
         action = store
          nargs = 1
           type = str

[status]
description     = Print the status of all repositories
local           = Only compare with local repositories = False
untracked-files = Show untracked files using git status mode (all, no, or normal)= no
        choices = ['no', 'normal', 'all']
        metavar = 'CHOICE'


